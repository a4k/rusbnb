openapi: 3.0.0
info:
    title: Rooms API
    version: 2.7.9
tags:
    -   name: User
        description: User methods
    -   name: Rooms
        description: Rooms methods
    -   name: Reviews
        description: Reviews methods
    -   name: Reservetions
        description: Reservetions methods
    -   name: RoomPhoto
        description: RoomPhoto methods

paths:
  /register:
    post:
      summary: Register a new user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of the user
                password:
                  type: string
                  description: Password of the user
      responses:
        '201':
          description: User created successfully
        '400':
          description: A user with that username already exists

  /login:
    post:
      summary: User login
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of the user
                password:
                  type: string
                  description: Password of the user
      responses:
        '200':
          description: User login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: integer
                    description: Access token for the authenticated user
        '401':
          description: Invalid credentials


  /logout:
    post:
      summary: User logout
      tags:
        - User
      responses:
        '200':
          description: User logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message


  /user/{user_id}:
    get:
      summary: Get user by ID
      tags:
        - User
      parameters:
        -   name: user_id
            in: path
            description: ID of the user to retrieve
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    delete:
      summary: Delete user by ID
      tags:
        - User
      parameters:
        -   name: user_id
            in: path
            description: ID of the user to delete
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        '404':
          description: User not found


  /user/{user_id}/avatar:
    post:
      summary: Change user avatar
      tags:
        - User
      parameters:
        -   name: user_id
            in: path
            description: ID of the user
            required: true
            schema:
              type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: Photo file to upload as the new avatar
      responses:
        '202':
          description: Photo successfully uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message

# ---------------------

  /reviews/{room_id}:
    get:
      summary: Get reviews by room ID
      tags:
        - Reviews
      parameters:
        -   name: room_id
            in: path
            description: ID of the room to retrieve reviews for
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: Reviews found
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        '404':
          description: Reviews not found


  /reviews/{review_id}:
    put:
      summary: Modify review by ID
      tags:
        - Reviews
      parameters:
        -   name: review_id
            in: path
            description: ID of the review to modify
            required: true
            schema:
              type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review_text:
                  type: string
                  description: The modified review text
                rate:
                  type: number
                  description: The modified review rate
      responses:
        '202':
          description: Review modified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message

    delete:
      summary: Delete review by ID
      tags:
        - Reviews
      parameters:
        -   name: review_id
            in: path
            description: ID of the review to delete
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message


  /avr-rate/{room_id}:
    get:
      summary: Get the average rate for a room
      tags:
        - Reviews
      parameters:
        -   name: room_id
            in: path
            description: The ID of the room
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: Average rate found
          content:
            application/json:
              schema:
                type: object
                properties:
                  average-rate:
                    type: string
        '404':
          description: Room not found

# ---------------------

  /book/user/{user_id}:
    get:
      summary: Get reservations by user ID
      tags:
        - Reservations
      parameters:
        -   name: user_id
            in: path
            description: The ID of the user
            required: true
            schema:
              type: integer
      responses:
        '200':
          description: User reservations found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationsOutputObject'
        '404':
          description: User reservations not found

  /book/{room_id}:
    post:
      summary: Add a room to the reservations list
      tags:
        - Reservations
      parameters:
        -   name: room_id
            in: path
            description: The ID of the room
            required: true
            schema:
              type: integer
      responses:
        '201':
          description: Room added to reservations list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationsOutputObject'
        '400':
          description: The room has already been booked
        '500':
          description: An error occurred creating the store

# ---------------------

  /rooms:
  get:
    summary: Get a list of rooms
    tags:
      - Rooms
    parameters:
      - in: query
        name: offset
        schema:
          type: integer
      - in: query
        name: size
        schema:
          type: integer
      - in: query
        name: place
        schema:
          type: string
      - in: query
        name: max_cost
        schema:
          type: integer
      - in: query
        name: type
        schema:
          type: string
      - in: query
        name: sort_by_cost
        schema:
          type: boolean
    responses:
      '200':
        description: Rooms found
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomsOutputObject'
      '404':
        description: Rooms not found

  post:
    summary: Create a new room
    tags:
      - Rooms
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoomInputObject'
    responses:
      '200':
        description: Successfully created room
      '400':
        description: Bad request
      '500':
        description: An error occurred creating the room


  /rooms/{room_id}:
    get:
      summary: Get a room by ID
      tags:
        - Rooms
      parameters:
        - name: room_id
          in: path
          description: The ID of the room to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Room found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomOutputObject'
        '404':
          description: Room not found

    put:
      summary: Update a room by ID
      tags:
        - Rooms
      parameters:
        - name: room_id
          in: path
          description: The ID of the room to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomInputObject'
      responses:
        '202':
          description: Successfully updated room
        '404':
          description: Room not found

    delete:
      summary: Delete a room by ID
      tags:
        - Rooms
      parameters:
        - name: room_id
          in: path
          description: The ID of the room to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted room
        '404':
          description: Room not found


  /rooms/{room_id}/photo:
    get:
      summary: Get room photos by room ID
      tags:
        - RoomPhoto
      parameters:
        - name: room_id
          in: path
          description: The ID of the room
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Photos found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomPhotosOutputObject'
        '404':
          description: Photos not found

    post:
      summary: Upload a photo for a room
      tags:
        - RoomPhoto
      parameters:
        - name: room_id
          in: path
          description: The ID of the room
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RoomPhotoInputObject'
      responses:
        '202':
          description: Photo successfully uploaded
        '400':
          description: Bad request
        '500':
          description: An error occurred uploading the photo

    delete:
      summary: Delete a photo by ID
      tags:
        - RoomPhoto
      parameters:
        - name: photo_id
          in: path
          description: The ID of the photo to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully delete photo
        '404':
          description: Photo not found